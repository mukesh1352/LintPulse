searchState.loadedDescShard("daemonize", 0, "daemonize is a library for writing system daemons. …\nUnable to change directory\nUnable to chown pid file\nUnable to chroot\nDaemonization options.\nThis error type for <code>Daemonize</code> <code>start</code> method.\nUnable to create new session\nUnable to fork\nExpects system group id or name. If name is provided it …\nGroup option contains NUL\nUnable to resolve group name to group id\nUnable to lock pid file\nUnable to open pid file\npid_file option contains NUL\nUnable to redirect standard streams to /dev/null\nUnable to set group\nUnable to set user\nDescribes what to do with a standard I/O stream for a …\nExpects system user id or name. If name is provided it …\nUser option contains NUL\nUnable to resolve user name to user id\nUnable to write self pid to pid file\nIf <code>chown</code> is true, daemonize will change the pid-file …\nChange root to <code>path</code>\nExecute <code>action</code> just before exiting the parent process. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDrop privileges to <code>group</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate pid-file at <code>path</code>, lock it exclusive and write …\nExecute <code>action</code> just before dropping privileges. Most …\nStart daemonization process.\nConfiguration for the child process’s standard error …\nConfiguration for the child process’s standard output …\nChange umask to <code>mask</code> or <code>0o027</code> by default.\nDrop privileges to <code>user</code>.\nChange working directory to <code>path</code> or <code>/</code> by default.")